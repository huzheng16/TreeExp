browseVignettes('TreeExp')
devtools::load_all()
browseVignettes('TreeExp')
browseVignettes('TreeExp')
browseVignettes('TreeExp')
library('TreeExp')
browseVignettes('TreeExp')
browseVignettes('TreeExp')
devtools::build_vignettes()
devtools::build_vignettes()
devtools::load_all()
browseVignettes('TreeExp')
devtools::build_vignettes(clean = FALSE)
browseVignettes('TreeExp')
browseVignettes('TreeExp')
knit_with_parameters('~/TreeExp/vignettes/Tutorial-TreeExp.Rmd')
devtools::load_all()
browseVignettes('TreeExp')
browseVignettes('AnceTran')
devtools::load_all()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
browseVignettes()
browseVignettes('TreeExp')
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
?rmarkdown::pdf_document()
?rmarkdown::html_vignette()
browseVignettes('TreeExp')
blogdown:::serve_site()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
devtools::load_all()
data('example_data')
example_data[1,5]<-'...'
data('example_data')
example_data[6,]<-'...'
example_data[6,]<-rep('...',5)
rep('...',5)
example_data[6,]
rownames(example_data)[6]
rownames(example_data)[5]
rownames(example_data)
example_data[6,1]<-'...'
example_data[6,1]<-character('...')
example_data[6,1]<-as.character('...')
example_data[6,1]
example_data[6,1]<-...
example_data[6,1]<-c("...")
example_data[6,1]<-c("/...")
example_data[6,1]<-c("***")
example_data[6,1]<-c("*")
example_data[6,1]<-c("a")
example_data[6,1]<-'ab'
example_data[5,1]
dismat_sou_v <- expdist(tetraExp, taxa = "all",
subtaxa = "Brain",
method = "sou_v")
devtools::load_all()
dismat_sou_v <- expdist(tetraExp, taxa = "all",
subtaxa = "Brain",
method = "sou_v")
dismat_sou_v
devtools::load_all()
dismat_sou_v <- expdist(tetraExp, taxa = "all",
subtaxa = "Brain",
method = "sou_v")
as.dist(dismat_sou_v)
dismat_sou_v
devtools::load_all()
dismat_sou_v <- expdist(tetraExp, taxa = "all",
subtaxa = "Brain",
method = "sou_v")
devtools::load_all()
dismat_sou_v <- expdist(tetraExp, taxa = "all",
subtaxa = "Brain",
method = "sou_v")
devtools::load_all()
dismat_sou_v <- expdist(tetraExp, taxa = "all",
subtaxa = "Brain",
method = "sou_v")
as.dist(dismat_sou_v)
dismat_sou_v
as.dist(dismat_sou_v$distance)
dismat_sou <- expdist(tetraExp, taxa = "all",
subtaxa = "Brain",
method = "sou")
as.dist(dismat_sou)
devtools::load_all()
expression_table <- exptabTE(tetraExp, taxa = "all",
subtaxa = "Brain")
dismat <- dist.pea(expression_table)
dismat
tr <- NJ(dismat_sou_v)
tr <- NJ(dismat_sou_v$distance)
dismat_sou_v$distance
dismat_sou
tr <- NJ(dismat_sou)
NJ
NJ(dismat)
?NJ
devtools::load_all()
library('ape')
NJ(dismat)
?ape::nj
ape::nj
library(phytools)
NJ(dismat)
NJ(dismat)
nj(dismat)
ape::nj
NJ(dismat)
nj(dismat)
?NJ
library('ape')
data(tetraExp)
dismat <- expdist(tetraExp, taxa = "all",
subtaxa = "Brain",
method = "pea")
tr <- root(NJ(dismat), "Chicken_Brain")
tr <- root(NJ(dismat), "Chicken_Brain")
devtools::load_all()
tr <- root(NJ(dismat), "Chicken_Brain")
nj
devtools::load_all()
tr <- root(NJ(dismat), "Chicken_Brain")
devtools::document()
devoo
devtools::load_all()
obj <- list(edge = cbind(ans[[3]], ans[[4]]), edge.length = ans[[5]],
tip.label = labels, Nnode = N - 2L)
ans <- .C(C_nj, as.double(X), as.integer(N), integer(2 * N - 3), integer(2 * N - 3), double(2 * N - 3), NAOK = TRUE)
nj
reorder()
?reorder()
devtools::load_all()
tr <- root(NJ(dismat), "Chicken_Brain")
plot(tr)
tr <- NJ(dismat_sou)
expression_table <-exptabTE(objects = tetraExp,taxa = 'all',subtaxa = 'Brain')
tr <- root(tr, "Chicken_Brain", resolve.root = T)
plot(tr, show.node.label = TRUE)
bs<-boot.exphy(phy=tr, x = expression_table, method = 'sou', outgroup = 'Chicken_Brain', B = 100)
tr$node.label = bs
plot(tr, show.node.label = TRUE)
devtools::load_all()
tr <- NJ(dismat_sou_v)
tr <- NJ(dismat_sou_v$distance)
expression_table <-exptabTE(objects = tetraExp,taxa = 'all',subtaxa = 'Brain')
tr <- root(tr, "Chicken_Brain", resolve.root = T)
plot(tr, show.node.label = TRUE)
bs<-boot.exphy(phy=tr, x = expression_table, method = 'sou_v', outgroup = 'Chicken_Brain', B = 100)
devtools::load_all()
bs<-boot.exphy(phy=tr, x = expression_table, method = 'sou_v', outgroup = 'Chicken_Brain', B = 100)
tr$node.label = bs
plot(tr, show.node.label = TRUE)
dismat_sou_v(expression_table)
dist_sou_v(expression_table)
dist.sou_v(expression_table)
(dist.sou_v(expression_table))$distance
?root
bookdown:::mathquill()
##### build NJ tree
tr <- NJ(dismat_sou)
### estract expression table of Brain tissue from 'tetraExp'
expression_table <-exptabTE(objects = tetraExp,taxa = 'all',
subtaxa = 'Brain')
### root the tree using 'Chicken_Brain' as outgroup
tr <- root(tr, "Chicken_Brain", resolve.root = T)
###### generating bootstrap values of the tree
bs<-boot.exphy(phy=tr, x = expression_table, method = 'sou', outgroup = 'Chicken_Brain',
B = 100)
### assign bootstrap values to the "node.label" of the tree
tr$node.label = bs
### plot the tree
plot(tr, show.node.label = TRUE)
data('tetraExp')
primate_group <-c('human','chimpanzee','gibbon','bonobo','gorilla','macaque')
expression_table <-exptabTE(objects = tetraExp,taxa = primate_group,
subtaxa = 'Brain')
primate_expT <-exptabTE(objects = tetraExp,taxa = primate_group,
subtaxa = 'Brain')
dismat <- expdist(tetraExp, taxa = primate_group,
subtaxa = "brain", method = "sou")
dismat
dist.sou(primate_expT)
?NJ
?root
primate_tree <- NJ(dismat)
primate_tree_root <- root(primate_tree, outgroup = "Macaque_Brain", resolve.root = T)
plot(primate_tree_root)
primate_tree_root <- root(primate_tree, outgroup = "Macaque_Brain")
plot(primate_tree_root)
primate_tree_root
primate_tree_root$edge.length
primate_tree$edge.length
primate_tree_root <- root(primate_tree, outgroup = "Macaque_Brain", resolve.root = T)
plot(primate_tree_root)
primate_tree_root <- root(primate_tree, outgroup = "Macaque_Brain", resolve.root = T)
bs<-boot.exphy(phy=primate_tree_root, x = primate_expT, method = 'sou', outgroup = 'Macaque_Brain',B = 100)
primate_tree_root$node.label = bs
plot(primate_tree_root, show.node.label = TRUE)
var_mat <- varMatInv(objects = tetraExp,phy = primate_tree,
taxa = primate_group, subtaxa = "Brain")
var_mat
MAG_expression <- primate_expT[which(rownames(primate_expT) == "ENSG00000105695"),]
MAG_expression
View(MAG_expression)
View(primate_expT)
which(rownames(primate_expT) == "ENSG00000105695")
View(primate_expT)
which(rownames(primate_expT) == "ENSG00000198824")
primate_expT[which(rownames(primate_expT) == "ENSG00000134531"),]
EMP1_expression <- primate_expT[which(rownames(primate_expT) == "ENSG00000134531"),]
EMP1_anc <- aee(x = EMP1_expression, phy = primate_tree, mat = var_mat)
primate_tree$node.label <- sprintf("%.4f",EMP1$est)
primate_tree$node.label <- sprintf("%.4f",EMP1_anc$est)
primate_tree$tip.label <- paste0(primate_tree$tip.label, "  ",
sprintf("%.4f", EMP1_expression))
plot(primate_tree, edge.color = "grey80", edge.width = 4,
show.node.label = T, align.tip.label = T)
plot(primate_tree_root, edge.color = "grey80", edge.width = 4,
show.node.label = T, align.tip.label = T)
plot(primate_tree, edge.color = "grey80", edge.width = 4,
show.node.label = T, align.tip.label = T)
t.test
?t.test
1-0.9746
exp_table <-exptabTE(tetraExp, taxa = 'all', subtaxa = 'Brain',rowindex = 200:800)
ztest <- RelaRate.test(expTable = exp_table, x = 'human', y = 'chimpanzee',
outgroup = 'macaque', alternative = 'greater')
ztest
devtools::load_all()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
data('data/example_data.rda')
data('example_data.rda')
devtools::load_all()
data('example_data.rda')
data('example_data')
View(example_data)
print(example_data)
View(example_data)
devtools::document()
devtools::check()
devtools::document()
?TreeExp
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::load_all()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtool
devtools::build_vignettes()
devtools::load_all()
devtools::build_vignettes()
devtools::check()
devtools::build_vignettes()
devtools::check()
devtools::check()
devtools::check()
devtools::load_all()
devtools::check()
devtools::install_github("jingwyang/TreeExp")
devtools::check()
library('phytools')
devtools::check()
?root
library('ape')
devtools::check()
devtools::load_all()
devtools::check()
devtools::check()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::check()
devtools::install_github("jingwyang/TreeExp")
devtools::install_github("jingwyang/TreeExp", build_opts = c("--no-resave-data", "--no-manual"), force = T)
library(TreeExp)
browseVignettes('TreeExp')
devtools::load_all()
data("tetraExp")
devtools::document()
data("tetraExp")
library('TreeRxp')
library('TreeExp')
data("tetraExp")
data('tetraExp')
data()
devtools::load_all()
devtools::document()
devtools::load_all()
setwd('../Desktop/')
testdata<-TEconstruct(ExpValueFP = 'Kassmann_data.txt')
print(testdata)
testdata[[1]]$exp_value[1:10]
tetraExp[[1]]$exp_value[1:10]
tetraExp<-testdata
devtools::use_data(tetraExp)
setwd('../TreeExp/')
devtools::use_data(tetraExp)
getwd
getwd()
devtools::use_data(tetraExp)
devtools::load_all()
devtools::use_data(tetraExp)
usethis::use_data(tetraExp)
getwd()
devtools::load_all()
tetraExp <- TEconstruct(ExpValueFP = "../Desktop/Kassmann_data.txt")
devtools::use_data(tetraExp)
?tetraExp
devtools::load_all()
devtools::document()
devtools::use_data(tetraExp)
devtools::use_data(abc)
abv<-tetraExp
devtools::use_data(abv)
etraexp<-tetraExp
tetraexp<-tetraExp
devtools::use_data(tetraexp)
devtools::use_data(tetraExp)
devtools::use_data(tetraExp,overwrite = TRUE)
?use_data()
?devtools::use_data()
devtools::load_all()
data(tetraExp)
ExpTetra<-tetraExp
devtools::use_data(ExpTetra)
devtools::use_data(tetraExp)
tetraExp <- TEconstruct(ExpValueFP = "../Desktop/Kassmann_data.txt")
devtools::use_data(tetraExp)
TetraExp <- TEconstruct(ExpValueFP = "../Desktop/Kassmann_data.txt")
devtools::use_data(TetraExp)
devtools::use_data(TetraExp,overwrite = TRUE)
devtools::use_data(TetraExp,overwrite = TRUE)
devtools::use_data(tetraExp,overwrite = TRUE)
devtools::load_all()
tetraExp <- TEconstruct(ExpValueFP = "../Desktop/Kassmann_data.txt")
devtools::use_data(tetraExp)
?devtools::install_github
?browseVignettes
devtools::load_all()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::check()
devtools::build_vignettes()
browseVignettes('TreeExp')
devtools::load_all()
devtools::build_vignettes()
devtools::check()
devtools::build_vignettes()
devtools::load_all()
devtools::check()
devtools::build_vignettes()
devtools::load_all()
devtools::build_vignettes()
devtools::build_vignettes('TreeExp')
devtools::build_vignettes(pkg = 'TreeExp')
devtools::build_vignettes()
devtools::check()
R CMD BiocCheck
R CMD check
library('bioCheck')
library('BioCheck')
BiocManager::install("BiocCheck")
install.packages("~/Downloads/BiocCheck_1.20.0.tgz", repos = NULL, type = .Platform$pkgType)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BiocCheck")
install.packages("~/Downloads/BiocCheck_1.20.0.tgz", repos = NULL, type = .Platform$pkgType)
devtools::load_all()
install.packages('reshape2')
devtools::load_all()
library('reshape2')
install.packages('plyr')
devtools::load_all()
devtools::chech()
devtools::check()
installed.packages(commonmark)
installed.packages('knitr')
library(devtools)
has_devel()
library('knitr')
devtools::check()
installed.packages('commonmark')
library('commonmark')
install.packages("~/Downloads/commonmark_1.7.tgz", repos = NULL, type = .Platform$pkgType)
library('commonmark')
devtools::check()
installed.packages('xm12')
install.packages('xm12')
install.packages("~/Downloads/xml2_1.2.0.tgz", repos = NULL, type = .Platform$pkgType)
devtools::check()
install.packages('purr')
install.packages('purrr')
devtools::check()
install.packages('htmltools')
devtools::check()
install.packages('yaml')
devtools::check()
has_devel()
devtools::load_all()
data("example_data")
devtools::load_all()
devtools::check()
devtools::check()
library(blogdown)
install.packages('BioCheck')
install.packages("~/Downloads/BiocCheck_1.20.0.tgz", repos = NULL, type = .Platform$pkgType)
library('BioChech')
library('BioCheck')
install.packages("~/Downloads/BiocCheck_1.20.0.tgz", repos = NULL, type = .Platform$pkgType)
devtools::load_all()
BiocCheck::BiocCheck()
devtools::build_vignettes()
BiocCheck::BiocCheck()
?NJ
devtools::document()
devtools::document()
?print.data.frame
?print.phylo
devtools::document()
devtools::document()
devtools::document()
BiocCheck::BiocCheck()
BiocCheck::BiocCheck()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
BiocCheck::BiocCheck()
devtools::document()
devtools::load_all()
devtools::check()
devtools::document()
devtools::document()
devtools::load_all()
devtools::check()
BiocCheck::BiocCheck()
BiocCheck::BiocCheck()
BiocCheck::BiocCheck()
BiocCheck::BiocCheck()
devtools::load_all()
data('tetraExp')
devtools::check()
devtools::load_all()
BiocCheck::BiocCheck()
devtools::load_all()
BiocCheck::BiocCheck()
devtools::check()
devtools::load_all()
BiocCheck::BiocCheck()
BiocCheck::BiocCheckGitClone()
BiocCheck::BiocCheckGitClone()
devtools::load_all()
BiocCheck::BiocCheckGitClone()
BiocCheck::BiocCheckGitClone()
BiocCheck::BiocCheckGitClone()
devtools::load_all()
devtools::load_all()
BiocCheck::BiocCheckGitClone()
BiocCheck::BiocCheckGitClone()
devtools::load_all()
BiocCheck::BiocCheckGitClone()
BiocCheck::BiocCheckGitClone()
devtools::load_all()
BiocCheck::BiocCheckGitClone('TreeExp')
BiocCheck::BiocCheckGitClone()
BiocCheck::BiocCheckGitClone()
BiocCheck::BiocCheckGitClone()
BiocCheck::BiocCheckGitClone()
BiocCheck::BiocCheckGitClone()
BiocCheck::BiocCheckGitClone()
BiocCheck::BiocCheckGitClone()
BiocCheck::BiocCheckGitClone()
BiocCheck::BiocCheckGitClone()
BiocCheck::BiocCheckGitClone()
devtools::load_all()
BiocCheck::BiocCheckGitClone()
BiocCheck::BiocCheckGitClone()
BiocCheck::BiocCheckGitClone()
BiocCheck::BiocCheckGitClone()
BiocCheck::BiocCheckGitClone()
BiocCheck::BiocCheckGitClone()
BiocCheck::BiocCheckGitClone()
BiocCheck::BiocCheckGitClone()
BiocCheck::BiocCheckGitClone()
BiocCheck::BiocCheckGitClone()
BiocCheck::BiocCheck()
BiocCheck::BiocCheckGitClone()
BiocCheck::BiocCheckGitClone()
BiocCheck::BiocCheckGitClone()
BiocCheck::BiocCheckGitClone()
